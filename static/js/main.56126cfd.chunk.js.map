{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","paper","width","height","margin","dialog","padding","divider","color","title","backgroundColor","headers","baseUrl","cleanBook","id","author","category","App","classes","React","useState","open","setOpen","books","setBooks","newBook","setNewBook","updatedBook","setUpdatedBook","useEffect","a","requestOptions","method","fetch","json","response","Items","saveBook","uuid","body","JSON","stringify","alert","message","updateBook","index","findIndex","c","booksNew","deleteBook","filter","Fragment","Grid","direction","className","container","justifyContent","alignItems","item","Typography","align","gutterBottom","variant","Paper","TableContainer","style","maxHeight","component","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","scope","modelname","productionyear","price","Button","onClick","TextField","label","value","onChange","e","target","close","Dialog","fullWidth","DialogTitle","Divider","root","Box","mr","ml","mt","DialogContentText","marginTop","event","autoFocus","type","DialogActions","then","_","getPopup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56126cfd.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Box,\n    Button,\n    Dialog, DialogActions,\n    DialogContentText,\n    DialogTitle,\n    Divider,\n    Grid,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {uuid} from 'uuidv4';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    paper: {\n        width: \"100%\",\n        height: \"100vh\",\n        margin: \"auto\"\n    },\n    dialog: {\n        padding: \"5px\",\n    },\n    divider: {\n        color: \"red\",\n    },\n    title: {\n        color: \"black\",\n        backgroundColor: \"white\"\n    }\n\n});\n\nconst headers = {\n    \"Content-Type\": \"application/json\",\n    \"accept\": \"application/json\",\n};\n\nconst baseUrl = \"https://p60c8tz94d.execute-api.eu-west-3.amazonaws.com/books\";\nconst cleanBook = {\n    id: null,\n    author: \"\",\n    title: \"\",\n    category: \"\",\n}\n\nfunction App() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [books, setBooks] = React.useState([]);\n    const [newBook, setNewBook] = React.useState({\n        author: \"\",\n        title: \"\",\n        category: \"\",\n    });\n    const [updatedBook, setUpdatedBook] = React.useState({...cleanBook});\n\n    \n    React.useEffect(async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: headers\n        };\n        const response = await (await fetch(baseUrl, requestOptions)).json();\n        setBooks(response.Items);\n    }, []);\n\n    const saveBook = async () => {\n        const id = uuid();\n        const requestOptions = {\n            method: \"PUT\",\n            headers: headers,\n            body: JSON.stringify({\n                ...newBook,\n                id: id,\n            })\n        };\n        try {\n            await (await fetch(baseUrl, requestOptions)).json();\n            setBooks([...books, {\n                ...newBook,\n                id: id,\n            }]);\n        } catch (err) {\n            alert(\"Oups ... error saving new book: \" + err.message);\n        }\n    }\n\n    const updateBook =async () => {\n        const requestOptions = {\n            method: \"PUT\",\n            headers: headers,\n            body: JSON.stringify({\n                ...updatedBook,\n            })\n        };\n        try {\n            await (await fetch(baseUrl, requestOptions)).json();\n            const index = books.findIndex(c => c.id === updatedBook.id);\n            const booksNew = [...books];\n            booksNew[index] = {...updatedBook};\n            setBooks(booksNew);\n        } catch(err) {\n            alert(\"Oups ... error updating new book: \" + err.message);\n        }\n    }\n\n    const getPopup = () => {\n        if (!open) return null;\n        const close = () => {\n            setUpdatedBook({...cleanBook});\n            setOpen(false);\n        }\n        const update = () => {\n            updateBook().then(_ => close());\n        }\n        return (\n            <Dialog className={classes.dialog} fullWidth={true} open={open} aria-labelledby=\"company-dialog-popup\">\n                <DialogTitle className={classes.title}>\n                    {\"New Car\"}\n                </DialogTitle>\n                <Divider classes={{\n                    root: classes.divider\n                }}/>\n                <Box mr={2} ml={2} mt={0}>\n                    <DialogContentText style={{marginTop: \"20px\"}}>\n                        {\"Updating book's details below\"}\n                    </DialogContentText>\n                        <Grid item>\n                            <TextField\n                                onChange={(event) =>\n                                    setUpdatedBook({...updatedBook, author: event.target.value})}\n                                autoFocus\n                                id=\"name\"\n                                label={\"Author\"}\n                                type=\"text\"\n                                fullWidth\n                                value={updatedBook.author}\n                            />\n                        </Grid>\n                        <Grid item>\n                        <TextField\n                                onChange={(event) =>\n                                    setUpdatedBook({...updatedBook, title: event.target.value})}\n                                autoFocus\n                                id=\"name\"\n                                label={\"Title\"}\n                                type=\"text\"\n                                fullWidth\n                                value={updatedBook.title}\n                            />\n                        </Grid>\n                        <Grid item>\n                        <TextField\n                                onChange={(event) =>\n                                    setUpdatedBook({...updatedBook, category: event.target.value})}\n                                autoFocus\n                                id=\"name\"\n                                label={\"Category\"}\n                                type=\"text\"\n                                fullWidth\n                                value={updatedBook.category}\n                            />\n                    </Grid>\n                </Box>\n                <DialogActions style={{marginTop: \"20px\"}}>\n                    <Button\n                        variant={\"filled\"}\n                        onClick={close}\n                        color=\"secondary\"\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={\"filled\"}\n                        onClick={update}\n                        color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n\n    const deleteBook = async (id) => {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: headers,\n        };\n        try {\n            await (await fetch(`${baseUrl}\\\\${id}`, requestOptions));\n            setBooks(books.filter(c => c.id !== id));\n        } catch (err) {\n            alert(\"Oups ... error when deleting the book: \" + err.message);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Grid direction={\"column\"} className={classes.paper} container justifyContent=\"center\"\n                  alignItems={\"center\"}>\n                <Grid item><Typography align={\"center\"} gutterBottom variant=\"h2\">Our Books Table</Typography></Grid>\n                <Grid item>\n                    <Paper>\n                        <TableContainer style={{maxHeight: \"70vh\"}} component={Paper}>\n                            <Table stickyHeader aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell align=\"center\">Author</TableCell>\n                                        <TableCell align=\"center\">Title</TableCell>\n                                        <TableCell align=\"center\">Category</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {books.map(c => (\n                                        <TableRow key={c.id}>\n                                            <TableCell component=\"th\" scope={\"row\"}>\n                                                {c.modelname}\n                                            </TableCell>\n                                            <TableCell align={\"center\"}>{c.color}</TableCell>\n                                            <TableCell align={\"center\"}>{c.productionyear}</TableCell>\n                                            <TableCell align={\"center\"}>{c.price}</TableCell>\n                                            <TableCell align={\"center\"}>\n                                                <Button onClick={() => {\n                                                    setUpdatedBook({...c});\n                                                    setOpen(true);\n                                                }}>\n                                                    Update\n                                                </Button>\n                                                <Button onClick={() => deleteBook(c.id)}>\n                                                    Delete\n                                                </Button>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TableRow>\n                            <TableCell align={'center'}>\n                                <TextField id=\"new_author\" label=\"New author\" value={newBook.author}\n                                           onChange={(e) =>\n                                               setNewBook({...newBook, modelname: e.target.value})}\n                                />\n                            </TableCell>\n                            <TableCell align={'center'}>\n                                <TextField id=\"new_author\" label=\"New title\" value={newBook.title}\n                                           onChange={(e) =>\n                                               setNewBook({...newBook, modelname: e.target.value})}\n                                />\n                            </TableCell>\n                           \n                            <TableCell align={'center'}>\n                                <TextField id=\"new_author\" label=\"New category\" value={newBook.title}\n                                           onChange={(e) =>\n                                               setNewBook({...newBook, modelname: e.target.value})}\n                                />\n                            </TableCell>\n                            <TableCell align={\"center\"}>\n                                <Button onClick={saveBook}>Save</Button>\n                            </TableCell>\n                        </TableRow>\n                    </Paper>\n                </Grid>\n            </Grid>\n            {getPopup()}\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}