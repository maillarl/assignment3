{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","reportWebVitals.js","index.js"],"names":["ReadOnlyRow","book","handleEditClick","handleDeleteClick","title","author","category","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","books","setBooks","addFormData","setAddFormData","setEditFormData","editBookId","setEditBookId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","bookId","newBooks","index","findIndex","splice","className","onSubmit","editedBook","fetch","then","response","console","log","map","newBook","nanoid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d3d4db2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ book, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n    <tr>\r\n      <td>{book.title}</td>\r\n      <td>{book.author}</td>\r\n      <td>{book.category}</td>\r\n      <td>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, book)}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button type=\"button\" onClick={() => handleDeleteClick(book.id)}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyRow;","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a title...\"\r\n          name=\"title\"\r\n          value={editFormData.title}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an author...\"\r\n          name=\"author\"\r\n          value={editFormData.author}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a category...\"\r\n          name=\"category\"\r\n          value={editFormData.category}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <button type=\"submit\">Save</button>\r\n        <button type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\n\nconst App = () => {\n  const [books, setBooks] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    title: \"\",\n    author: \"\",\n    category: \"\",\n\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    title: \"\",\n    author: \"\",\n    category: \"\",\n  });\n\n  const [editBookId, setEditBookId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newBook = {\n      id: nanoid(),\n      title: addFormData.title,\n      author: addFormData.author,\n      category: addFormData.category\n    };\n\n    const newBooks = [...books, newBook];\n    setBooks(newBooks);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedBook = {\n      id: editBookId,\n      title: editFormData.title,\n      author: editFormData.author,\n      category: editFormData.category\n    };\n\n    const newBooks = [...books];\n\n    const index = books.findIndex((book) => book.id === editBookId);\n\n    newBooks[index] = editedBook;\n\n    setBooks(newBooks);\n    setEditBookId(null);\n    fetch('API_url').then((response) => {\n      console.log(response)\n    })\n\n  };\n\n  const handleEditClick = (event, book) => {\n    event.preventDefault();\n    setEditBookId(book.id);\n\n    const formValues = {\n      title: book.title,\n      author: book.author,\n      category: book.category,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditBookId(null);\n  };\n\n  const handleDeleteClick = (bookId) => {\n    const newBooks = [...books];\n\n    const index = books.findIndex((book) => book.id === bookId);\n\n    newBooks.splice(index, 1);\n\n    setBooks(newBooks);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Author</th>\n              <th>Category</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {books.map((book) => (\n              <Fragment>\n                {editBookId === book.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    book={book}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Add a book</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          required=\"required\"\n          placeholder=\"Enter a title...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"author\"\n          required=\"required\"\n          placeholder=\"Enter an author...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"category\"\n          required=\"required\"\n          placeholder=\"Enter a category ...\"\n          onChange={handleAddFormChange}\n        />\n        \n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}